#user  nobody;
worker_processes  4;

# 最大打开文件数，可设置为系统优化后的ulimit     -HSn的结果
worker_rlimit_nofile 65535;

events {
    # use是一个事件模块指令，用来指定Nginx的工作模式。Nginx支持的工作模式有select，poll，kqueue，epoll，rtsig和/dev/poll。
    # 其中select和poll都是标准的工作模式，kqueue和epoll是高效的工作模式，不同的是epoll用在Linux平台上，而kqueue用在BSD系统中。
    # 对于Linux系统Linux2.6+内核，推荐选择epoll工作模式，这是高性能高并发的设置
    use epoll;
    # worker_connections也是个事件模块指令，用于定义Nginx每个进程的最大连接数，默认是1024.最大客户端连接数由worker_processes和worker_connections决定，
    # 即Max_client=  worker_processes*worker_connections。进程的最大连接数受Linux系统进程的最大打开文件数限制，在执行操作系统命令
    # “ulimit   -HSn    65535”或配置相应文件后，worker_connections的设置才能生效。
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # 激活或禁用sendfile()功能功能。　
    # sendfile参数用于开启文件的高效传输模式。同时将tcp_nopush和tcp_nodelay两个指令设置为on，可防止网络及磁盘I/O阻塞，提升Nginx工作效率。
    sendfile on;
    # 激活或禁用Linux上的TCP_CORK socket选项，此选项仅仅当开启sendfile时才生效,允许把http response header和文件的开始部分放在一个文件里发布，作用是减少网络报文段的数量。
    tcp_nopush on;
    # 保持会话的超时时间为60秒
    keepalive_timeout 60;
    # 用于激活tcp_ondelay功能，提高I/O性能。
    # 默认情况下当数据发送时，内核并不会马上发送，可能会等待更多的字节组成一个数据包，这样可以提高I/O性能。使用tcp_nodelay功能，等待时间会比较长。
    tcp_nodelay on;
    # 设置读取客户端请求头数据的超时时间
    # 设置读取客户端请求头数据的超时时间。服务器端将返回“Request time out (408)”错误，可指定一个超时时间，防止客户端利用http协议进行攻击。
    client_header_timeout 15;
    # 用于设置读取客户端请求主体的超时时间，默认值60
    client_body_timeout 15;
    # 用于指定响应客户端的超时时间。
    send_timeout 25;
    # 调整上传文件的大小
    # 具体大小根据公司的业务做调整，如果不清楚就先设置为8m.
    client_max_body_size 8m;

    # 表示Nginx服务器和后端FastCGl服务器连接的超时时间，默认值为60fastcgi_connect.timeout秒，
    # 这个参数值通常不要超过75秒，因为建立的连接越多，消耗的资源就越多
    fastcgi_connect_timeout 60;
    # 设置Nginx允许FastCG1服务器端返回数据的超时时间，即在规定时间之fastcgi_send.timeout 内后端服务器必须传完所有的数据，
    # 否则，Nginx将断开这个连接。其默认值为60秒
    fastcgi_send_timeout 60;
    # 设置Nginx从FastCGl服务器端读取响应信息的超时时间，表示连接建立fastcgi_read_timeout成功后，
    # Nginx等待后嶺服务器的响应时间，是Nginx已经进人后端的排队之中等候处理的时间
    fastcgi_read_timeout 60;
    # 这是Nginx FastCGl的缓冲区大小参数，设定用来读取以FastCGl服务器端收到的第一部分响应信息的缓冲区大小，
    # 这里的第一部分通常会包含一个fastcgi_buffer.size小的响应头部。默认情况下，这个参数的大小是由fastegi buffers 指定的一个缓冲区的大小
    fastcgi_buffer_size 64k;
    # 设定用来读取从FastCGl服务器端收到的响应信息的缓冲区大小和缓冲区数量，
    # 默认值为fastcgi buffers 8 4k;。指定本地需要用多少和多大的缓冲区来缓冲FastCGl的应答请求。
    # 如果一个PHP脚本所产生的页面大小为256KB，那么会为其分配4个64KB的缓fastcgi_ buffers 冲区来缓存;
    # 如果页面大小大于256KB.那么大于256KB的部分会缓存到fastcgi temp 指定的路径中，但是这并不是好方法，因为内存中的数据处理速度要快于硬盘。
    # 一般这个值应该为站点中PHP脚本所产生的页面大小的中间值，如果站点大部分脚本所产生的页面大小为256KB,那么可以把这个值设置为“16 16k”, "4 64k”等
    fastcgi_buffers 4 64k;
    # 用于设置系统很忙时可以使用的fastcgi_buffers大小，官方推荐的大小为fastcgi_ buffers*2
    fastcgi_busy_buffers_size 128k;
    # FastCGI临时文件的大小,可设为128~256KB
    fastcgi_temp_file_write_size 128k;

    # 开启gzip压缩功能
    gzip on;
    # 设置允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取。默认值0，表示不管页面多大都进行压缩。
    # 建议设置成大于1K，如果小于1K可能会越压越大。
    gzip_min_length 1k;
    # 压缩缓冲区大小。表示申请4个单位为16K的内存作为压缩结果流缓存，默认值是申请与原始数据大小相同的内存空间来存储gzip压缩结果。
    gzip_buffers 4 16K;
    # 压缩版本（默认1.1，前端为squid2.5时使用1.0），用于设置识别HTTP协议版本，默认是1.1，目前大部分浏览器已经支持GZIP解压，使用默认即可。
    gzip_http_version 1.1;
    # 压缩比率。用来指定gzip压缩比，1压缩比最小，处理速度最快；9压缩比最大，传输速度快，但处理最慢，也比较消耗CPU资源。
    gzip_comp_level 2;
    # 用来指定压缩的类型，“text/html”类型总是会被压缩，这个就是HTTP原理部分讲的媒体类型。
    gzip_types text/plain application/x-javascript text/css application/xml;
    # vary header支持。该选项可以让前端的缓存服务器缓存经过gzip压缩的页面，例如用Squid缓存经过Nginx压缩的数据。
    gzip_vary on;

    include conf.d/*;
}
